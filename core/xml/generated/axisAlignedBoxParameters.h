#ifndef AXIS_ALIGNED_BOX_PARAMETERS_H_
#define AXIS_ALIGNED_BOX_PARAMETERS_H_
/**
 * \file axisAlignedBoxParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */

/**
 * \brief Axis Aligned Box Parameters 
 * Axis Aligned Box Parameters 
 **/
class AxisAlignedBoxParameters : public BaseReflection<AxisAlignedBoxParameters>
{
public:
    enum FieldId {
        X_ID,
        Y_ID,
        Z_ID,
        WIDTH_ID,
        HEIGHT_ID,
        DEPTH_ID,
        AXIS_ALIGNED_BOX_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief X 
     * X 
     */
    double mX;

    /** 
     * \brief Y 
     * Y 
     */
    double mY;

    /** 
     * \brief Z 
     * Z 
     */
    double mZ;

    /** 
     * \brief width 
     * width 
     */
    double mWidth;

    /** 
     * \brief height 
     * height 
     */
    double mHeight;

    /** 
     * \brief depth 
     * depth 
     */
    double mDepth;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    double x() const
    {
        return mX;
    }

    double y() const
    {
        return mY;
    }

    double z() const
    {
        return mZ;
    }

    double width() const
    {
        return mWidth;
    }

    double height() const
    {
        return mHeight;
    }

    double depth() const
    {
        return mDepth;
    }

    /* Section with setters */
    void setX(double x)
    {
        mX = x;
    }

    void setY(double y)
    {
        mY = y;
    }

    void setZ(double z)
    {
        mZ = z;
    }

    void setWidth(double width)
    {
        mWidth = width;
    }

    void setHeight(double height)
    {
        mHeight = height;
    }

    void setDepth(double depth)
    {
        mDepth = depth;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit(mX,                         static_cast<const DoubleField *>  (fields()[X_ID]));
        visitor.visit(mY,                         static_cast<const DoubleField *>  (fields()[Y_ID]));
        visitor.visit(mZ,                         static_cast<const DoubleField *>  (fields()[Z_ID]));
        visitor.visit(mWidth,                     static_cast<const DoubleField *>  (fields()[WIDTH_ID]));
        visitor.visit(mHeight,                    static_cast<const DoubleField *>  (fields()[HEIGHT_ID]));
        visitor.visit(mDepth,                     static_cast<const DoubleField *>  (fields()[DEPTH_ID]));
    }

    AxisAlignedBoxParameters()
    {
        DefaultSetter setter;
        accept(setter);
    }

    AxisAlignedBoxParameters(
          double x
        , double y
        , double z
        , double width
        , double height
        , double depth
    )
    {
        mX = x;
        mY = y;
        mZ = z;
        mWidth = width;
        mHeight = height;
        mDepth = depth;
    }

    friend ostream& operator << (ostream &out, AxisAlignedBoxParameters &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //AXIS_ALIGNED_BOX_PARAMETERS_H_
