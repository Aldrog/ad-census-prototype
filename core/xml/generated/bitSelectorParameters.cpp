/**
 * \file bitSelectorParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "bitSelectorParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {
template<>
Reflection BaseReflection<BitSelectorParameters>::reflection = Reflection();
template<>
int BaseReflection<BitSelectorParameters>::dummy = BitSelectorParameters::staticInit();
} // namespace corecvs 

SUPPRESS_OFFSET_WARNING_BEGIN

int BitSelectorParameters::staticInit()
{

    ReflectionNaming &nameing = naming();
    nameing = ReflectionNaming(
        "Bit Selector Parameters",
        "Bit Selector Parameters",
        ""
    );
     

    fields().push_back(
        new IntField
        (
          BitSelectorParameters::SHIFT_ID,
          offsetof(BitSelectorParameters, mShift),
          0,
          "shift",
          "shift",
          "shift"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_0_ID,
          offsetof(BitSelectorParameters, mBit0),
          true,
          "bit 0",
          "bit 0",
          "bit 0"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_1_ID,
          offsetof(BitSelectorParameters, mBit1),
          true,
          "bit 1",
          "bit 1",
          "bit 1"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_2_ID,
          offsetof(BitSelectorParameters, mBit2),
          true,
          "bit 2",
          "bit 2",
          "bit 2"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_3_ID,
          offsetof(BitSelectorParameters, mBit3),
          true,
          "bit 3",
          "bit 3",
          "bit 3"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_4_ID,
          offsetof(BitSelectorParameters, mBit4),
          true,
          "bit 4",
          "bit 4",
          "bit 4"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_5_ID,
          offsetof(BitSelectorParameters, mBit5),
          true,
          "bit 5",
          "bit 5",
          "bit 5"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_6_ID,
          offsetof(BitSelectorParameters, mBit6),
          true,
          "bit 6",
          "bit 6",
          "bit 6"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_7_ID,
          offsetof(BitSelectorParameters, mBit7),
          true,
          "bit 7",
          "bit 7",
          "bit 7"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_8_ID,
          offsetof(BitSelectorParameters, mBit8),
          true,
          "bit 8",
          "bit 8",
          "bit 8"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_9_ID,
          offsetof(BitSelectorParameters, mBit9),
          true,
          "bit 9",
          "bit 9",
          "bit 9"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_10_ID,
          offsetof(BitSelectorParameters, mBit10),
          true,
          "bit 10",
          "bit 10",
          "bit 10"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_11_ID,
          offsetof(BitSelectorParameters, mBit11),
          true,
          "bit 11",
          "bit 11",
          "bit 11"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_12_ID,
          offsetof(BitSelectorParameters, mBit12),
          true,
          "bit 12",
          "bit 12",
          "bit 12"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_13_ID,
          offsetof(BitSelectorParameters, mBit13),
          true,
          "bit 13",
          "bit 13",
          "bit 13"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_14_ID,
          offsetof(BitSelectorParameters, mBit14),
          true,
          "bit 14",
          "bit 14",
          "bit 14"
        )
    );
    fields().push_back(
        new BoolField
        (
          BitSelectorParameters::BIT_15_ID,
          offsetof(BitSelectorParameters, mBit15),
          true,
          "bit 15",
          "bit 15",
          "bit 15"
        )
    );
   return 0;
}

SUPPRESS_OFFSET_WARNING_END


