#ifndef OPERATION_PARAMETERS_H_
#define OPERATION_PARAMETERS_H_
/**
 * \file operationParameters.h
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include "reflection.h"
#include "defaultSetter.h"
#include "printerVisitor.h"

/*
 *  Embed includes.
 */
/*
 *  Additional includes for Composite Types.
 */

using namespace corecvs;

/*
 *  Additional includes for Pointer Types.
 */

namespace corecvs {
}
/*
 *  Additional includes for enum section.
 */
#include "operation.h"

/**
 * \brief Operation Parameters 
 * Operation Parameters 
 **/
class OperationParameters : public BaseReflection<OperationParameters>
{
public:
    enum FieldId {
        OPERATION_ID,
        OPERATION_PARAMETERS_FIELD_ID_NUM
    };

    /** Section with variables */

    /** 
     * \brief operation 
     * operation 
     */
    int mOperation;

    /** Static fields init function, this is used for "dynamic" field initialization */ 
    static int staticInit();

    /** Section with getters */
    const void *getPtrById(int fieldId) const
    {
        return (const unsigned char *)(this) + fields()[fieldId]->offset;
    }
    Operation::Operation operation() const
    {
        return static_cast<Operation::Operation>(mOperation);
    }

    /* Section with setters */
    void setOperation(Operation::Operation operation)
    {
        mOperation = operation;
    }

    /* Section with embedded classes */
    /* visitor pattern - http://en.wikipedia.org/wiki/Visitor_pattern */
template<class VisitorType>
    void accept(VisitorType &visitor)
    {
        visitor.visit((int &)mOperation,          static_cast<const EnumField *>    (fields()[OPERATION_ID]));
    }

    OperationParameters()
    {
        DefaultSetter setter;
        accept(setter);
    }

    OperationParameters(
          Operation::Operation operation
    )
    {
        mOperation = operation;
    }

    friend ostream& operator << (ostream &out, OperationParameters &toSave)
    {
        PrinterVisitor printer(out);
        toSave.accept<PrinterVisitor>(printer);
        return out;
    }

    void print ()
    {
        cout << *this;
    }
};
#endif  //OPERATION_PARAMETERS_H_
