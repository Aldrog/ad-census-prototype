/**
 * \file lensDistortionModelParameters.cpp
 * \attention This file is automatically generated and should not be in general modified manually
 *
 * \date MMM DD, 20YY
 * \author autoGenerator
 */

#include <vector>
#include <stddef.h>
#include "lensDistortionModelParameters.h"

/**
 *  Looks extremely unsafe because it depends on the order of static initialization.
 *  Should check standard if this is ok
 *
 *  Also it's not clear why removing "= Reflection()" breaks the code;
 **/

namespace corecvs {

void LensDistortionModelParameters::getInscribedImageRect(const Vector2dd &tlDistorted, const Vector2dd &drDistorted, Vector2dd &tlUndistorted, Vector2dd &drUndistorted) const
{
    std::vector<corecvs::Vector2dd> boundaries[4];
    getRectMap(tlDistorted, drDistorted, boundaries);

    tlUndistorted = mapBackward(tlDistorted);
    drUndistorted = mapBackward(drDistorted);

    for (auto& v: boundaries[0])
        if (v[1] > tlUndistorted[1])
            tlUndistorted[1] = v[1];
    for (auto& v: boundaries[2])
        if (v[1] < drUndistorted[1])
            drUndistorted[1] = v[1];
    for (auto& v: boundaries[1])
        if (v[0] > tlUndistorted[0])
            tlUndistorted[0] = v[0];
    for (auto& v: boundaries[3])
        if (v[0] < drUndistorted[0])
            drUndistorted[0] = v[0];
}

void LensDistortionModelParameters::getCircumscribedImageRect(const Vector2dd &tlDistorted, const Vector2dd &drDistorted, Vector2dd &tlUndistorted, Vector2dd &drUndistorted) const
{
    std::vector<corecvs::Vector2dd> boundaries[4];
    getRectMap(tlDistorted, drDistorted, boundaries);

    tlUndistorted = mapBackward(tlDistorted);
    drUndistorted = mapBackward(drDistorted);

    for (auto& v: boundaries[0])
        if (v[1] < tlUndistorted[1])
            tlUndistorted[1] = v[1];
    for (auto& v: boundaries[2])
        if (v[1] > drUndistorted[1])
            drUndistorted[1] = v[1];
    for (auto& v: boundaries[1])
        if (v[0] < tlUndistorted[0])
            tlUndistorted[0] = v[0];
    for (auto& v: boundaries[3])
        if (v[0] > drUndistorted[0])
            drUndistorted[0] = v[0];
}

void LensDistortionModelParameters::getRectMap(const Vector2dd &tl, const Vector2dd &dr, std::vector<Vector2dd> boundaries[4]) const
{
    Vector2dd shifts[] =
    {
        Vector2dd(1, 0),
        Vector2dd(0, 1),
        Vector2dd(1, 0),
        Vector2dd(0, 1)
    };
    Vector2dd origins[] =
    {
        tl,
        tl,
        Vector2dd(tl[0], dr[1]),
        Vector2dd(dr[0], tl[1])
    };
    int steps[] =
    {
        (int)std::ceil(dr[0] - tl[0]) + 1,
        (int)std::ceil(dr[1] - tl[1]) + 1,
        (int)std::ceil(dr[0] - tl[0]) + 1,
        (int)std::ceil(dr[1] - tl[1]) + 1
    };

    for (int i = 0; i < 4; ++i)
    {
        boundaries[i].resize(steps[i]);
        std::vector<Vector2dd> boundary = boundaries[i];
        Vector2dd shift    = shifts[i];
        Vector2dd origin   = origins[i];
        int step     = steps[i];

        for (int j = 0; j < step; j++)
            boundary[j] = mapBackward(origin + j * shift);
    }
}

}
